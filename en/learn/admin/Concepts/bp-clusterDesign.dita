<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic xml:lang="en-us" id="topic2131">
 <title>Cluster design considerations</title>
 <shortdesc>Cluster design takes into account topics such as RAM, number of nodes and cores, client
  or server-side moxi, and so on.</shortdesc>
 <body>
  
  <dl>
   <dlentry>
    <dt>RAM</dt>
    <dd>Memory is a key factor for smooth cluster performance. Couchbase Server is a best
     solution for applications that keep most of their active dataset in memory. It is very
     important that all actively used data (the working set) lives in memory. When there is not
     enough memory left, some data is ejected from memory and will only exist on disk. Accessing
     data from disk is much slower than accessing data in memory. As a result, if ejected data is
     accessed frequently the cluster performance suffers. Use the formula provided in Sizing
     Guidelines  to verify your configuration, optimize performance, and avoid this situation.</dd>
   </dlentry>
  </dl>
  
  <dl>
   <dlentry>
    <dt>Number of nodes</dt>
    <dd>Once you know how much memory you need, you must decide whether to have a
     few large nodes or many small nodes.<ul>
      <li>Many small nodes: You are distributing I/O across several machines. However, there is also 
       a higher chance of node failure (across the whole cluster).</li>
      <li>Few large nodes: If a node fails, it greatly impacts the application.</li>
      <li>Choosing between many small nodes and few large nodes presents a tradeoff between reliability and efficiency.</li>
     </ul></dd>
   </dlentry>
  </dl>
  
  <dl>
   <dlentry>
    <dt>Client or server-side moxi</dt>
    <dd>Couchbase Server prefers a client-side moxi (or a smart client) over a server-side moxi. However,
     for development environments or for faster, easier deployments, you can use server-side moxis. A
     server-side moxi is not recommended because it produces an additional hop if a server receives a
     client request and doesnâ€™t have the requested data.</dd>
   </dlentry>
  </dl>
  
  <dl>
   <dlentry>
    <dt>Number of cores</dt>
    <dd>Couchbase Server is more memory- or I/O bound than it is CPU-bound. However,
     it is more efficient on machines that have at least two cores.</dd>
   </dlentry>
  </dl>
 
  
  <dl>
   <dlentry>
    <dt>Storage type</dt>
    <dd>You can choose either SSDs (solid state drives) or spinning disks to store
     data. SSDs are faster than rotating media but are currently more expensive. Couchbase Server needs
     less memory if a cluster uses SSDs as their I/O queue buffer is smaller.</dd>
   </dlentry>
  </dl>
  
  <dl>
   <dlentry>
    <dt>WAN Deployments</dt>
    <dd>Couchbase Server is not designed to have clusters or clients that span data centers. It
     requires that intra-cluster (server to server) latency be very low, as well as between the
     cluster and Couchbase clients. If you require the ability to be in one or more data centers, see <xref href="../XDCR/xdcr-intro.dita">Cross Datacenter Replication
     (XDCR)</xref>.</dd>
   </dlentry>
  </dl>
  
  <dl>
   <dlentry>
    <dt>Shared storage</dt>
    <dd>It is strongly recommended to avoid using centralized back-end storage system such as a SAN
     or NAS. While they can support good performance, they present a single bottleneck or point of
     failure that limits the distributed nature of Couchbase. </dd>
   </dlentry>
  </dl>
 
 
 </body>

</topic>
