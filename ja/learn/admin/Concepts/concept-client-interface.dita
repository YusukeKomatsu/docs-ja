<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_onr_w4j_dp">
	<title>Client interface</title>
	<shortdesc />
	<conbody>

		<p>CouchbaseServerでは、アクセスしたいデータのレベルや量に応じてデータベースた方法を利用します。
                   それぞれの方法は、作成・取得・更新・削除という基本的なオペレーションに分類することが出来ます。</p>

		<section><title>作成</title>
			<p>情報は、特定の<i>key</i>に対応する<i>value</i>として、memcachedプロトコルインターフェースを利用して、データベースに保存されます。
			   バルクオペレーションを用いることで、同時に大量のドキュメントのkey/valueをセットすることが出来ます。
			   これは、小さなリクエストを何度もすることに比べ、より効果的です。</p>
			<p>valueは、構造化されたあるいは非構造な文字列、ネイティブクライアントによってシリアライズされたオブジェクト、
                           また、ネイティブなバイナリデータ（画像や音声など）、全てのバイナリバリューを取ることが出来ます。
                           ただし、CouchbaseServerのViewエンジンを使うためには、情報はネストされたフィールド・配列・スカラーデータで構成されている
                           JavaScript Object Nation(JSON)フォーマットで保存されている必要があります。
			  </p></section>

		<section>
			<title>取得</title>
			<p>データベースから情報を取り出すには、「Keyから取得」もしくは「Viewから取得」します。</p>
			<ul>
				<li>Keyからの取得 <p>特定のValueに対応するKeyが分かるのなら、memcachedプロトコル（もしくは、memcached互換のクライアントライブラリ）を用いて
                                    特定のKeyからValueを取得すればいいでしょう。
                                    同じ方法で、バルクオペレーションも利用できます。
					</p></li>
				<li>Viewからの取得 <p>Keyが分からなければ、必要な情報を取得するためのviewを書くことで、Viewシステムを使うことも出来ます。
						      viewは、データベースから、各JSONオブジェクトにアクセスするための情報の列を作成します。
						      viewの定義は、（特定の情報もしくは、情報のレンジを選択するための）keyとvalueを含みます。
						      例えば、連絡先名に対して連絡先アドレスをvalueにもつ、連絡先情報のビューを作ったとします。
						      各Viewは、オリジナルのオブジェクトを保存するのに使うキーも出力します。
						      viewが必要な情報を含んでいなかった場合、memcachedプロトコルを用いて完全なレコードを取得するために必要なkeyを受け取ることが出来ます。
						</p>
				</li>
			</ul>
		</section>

		<section>
			<title>更新</title>
			<p>データベースの情報をアップデートするためにはmemcachedプロトコルのインターフェースを使う必要があります。
			   memchacedプロトコルは、すべてのコンテンツを直接アップデートだけでなく、
		           既存レコードに情報を付加したりintegerで保存されているvalueをインクリメントしたりデクリメントすることも出来ます。</p>
		</section>

		<section><title>削除</title>
			<p>CouchbaseServerから情報を削除するには、memchachedプロトコルを利用して、
			key/valueのペアを削除する明確なdeleteコマンドを使用する必要があります。
			</p>
			<p>しかしながら、CouchbaseServerはexpiry valueとしてデータベースに情報を保存することも出来ます。
			   expirity valueとは、自動的にデータベース全体から削除されるkey/valueのペアのことであり、
			   相対時間（例：60秒間）もしくは絶対時間（例：2012年12月31日）という形式で指定します。
			</p>
		</section>


	</conbody>
</concept>
