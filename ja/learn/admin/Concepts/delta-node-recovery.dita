<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic xml:lang="ja" id="topic_s15_tlh_14">
  <title>デルタノードリカバリ</title>
  <shortdesc>
	  デルタノードリカバリを使うと、ノードをクラスタに再追加後に、変更されたデータの差分を反映させることができます。
  </shortdesc>
  
  <body>
  	
	<p>
		デルタノードリカバリは、フェイルオーバしたノードのディスク上にあるデータを再利用し、差分の変更を反映し再同期させることで、リカバリが可能です。
		フェイルオーバしたノードはどの時点でデータの変化が停止したのかを特定するためにチェックされ、その時点から再同期を開始します。
		サーバノードは保持するvBucketのデータ変化を反映した後、データの提供を開始します。
		元々のデータとバケットを再利用することで、最小のダウンタイムでクラスタの利用を開始できます。
		この操作により、リカバリ時間とネットワークリソース利用が向上します。
    </p>
    
	<p>
		サーバノードは様々な場面でクラスタから削除されます。
		以下の例は、サーバノードをクラスタからフェイルオーバした後に再追加する場面の一部を示しています(この他にも多くあります)。
    </p>
    
    <ul>
      <li>ノードが少しの間ダウンした</li>
      <li>計画的定期メンテナンス</li>
      <li>ネットワーク接続が少しの間切断した</li>
    </ul>
      
	<p>
		ノードがフェイルオーバされても、データファイルは保持されます。
		データファイルはCouchbaseサポートにも、データの復旧にも、デルタノードリカバリにも利用できます。
	</p>
    
	<p>
		ノードをフェイルオーバし、メンテナンスを行い、ノードをクラスタへ再追加して、リバランスを実行する処理において、
		フルリカバリモードかデルタリカバリモードでデータを復旧することができます。
		デルタリカバリモードでは、Couchbaseが(DCPを利用し)、どのデータファイルが最新で、どのデータファイルが古くなっているかを検知し、
		リバランス時に、フェイルオーバしたサーバノード上の既存のデータファイルを再利用し、古くなったファイルを更新します。
	</p>
    
	<p>
		サーバノードをフェイルオーバすると、Webコンソールに、Delta RecoveryとFull Recoveryの選択肢が表示されます。
		いずれの復旧方法もサーバをクラスタに再追加するためにリバランスが必要ですが、
		フルリカバリの場合、リバランス前にノードが持つ既存データを削除するのに対し、デルタリカバリではノードが持つ既存データを再利用します。
    </p>
    
    
    
    <p>デルタリカバリの条件:</p>
    <ul>
      <li>ノードとクラスタが健全な状態である必要があります。</li>
	  <li>
		  フェイルオーバしたサーバノードが必要です。
		  デルタリカバリはサーバ追加時のリバランス、およびサーバ削除時のリバランスでは利用できません。
	  </li>
	  <li>
		  すべてのバケットでデルタリカバリが実行できる必要があります。
		  例えば、いくつかのバケットがデルタリカバリ可能でも、それ以外のバケットが不可能であった場合、
		  Couchbaseクラスタはリバランス操作を許可しません。
	  </li>
	  <li>
		  なぜなら、デルタリカバリはフェイルオーバしたサーバノードのディスク上にある既存のデータファイルに依存しており、
		  それと完全に同じセットのバケットを、フェイルオーバしたサーバノードに転送する必要があるからです。
	  </li>
    </ul>
    
    <p>デルタリカバリの性質:</p>
    <ul>
		<li>
			データファイルはメモリ上に"ウォームアップ"されます。
			メモリへのウォームアップとはデータをメモリ上にロードすることです。
			どのメタデータが保持されるかによって、必要最小のすべてのデータファイルキーがリバランス操作の前にディスクからロードされます。
		</li>
      <li>インデックスは再追加するサーバノード上で必ず再構築されます。</li>
	  <li>
		  データサイズがRAMサイズよりもはるかに大きく、バケットでfull eviction(メタデータをメモリに保持しない)を設定していて、
		  インデックスを定義していない環境で利用してください。
		</li>
    </ul>

    
	<note type="tip">
		非常に大きなデータ量を保持する環境で、フェイルオーバしたサーバノードを再追加する場合に利用できます。
	</note>
    

 
 
    <section><title>デルタノードリカバリが利用できないシナリオ</title>
      
		<p>
			以下の条件は、デルタノードリカバリが利用できず、フルリカバリとなる条件です:
		</p>
      <ul>
		  <li>
			ノードがデルタリカバリ待ちの間にトポロジが変わった場合、デルタノードリカバリに影響します。
			例えば、他のノードを追加したり、ノードを削除したり、ノードをスワップするなどです。
          </li>
        <li>ダウンしたノードがハードフェイルオーバされ、削除待ちの場合。</li>
		<li>
			リバランスにより異なる数のノード追加、削除が実行された場合(スワップリバランスは実行可能です)。
		</li>
		<li>
			ノードがデルタリカバリ待ちの間に、デルタノードリカバリに影響するバケット操作を行った場合。
			例えば、新規のバケットを追加したり、バケットのレプリカ設定を変更したり、バケットをフラッシュするなどです。
		</li>
      </ul>
      

	  <p>
		以下は、デルタノードリカバリが利用できず、フルリカバリとなるシナリオです:
		</p>
      
      <p>Node 1をデルタリカバリ中にアクティブなサーバノードのNode 2がクラッシュ。</p>
      <ol>
		  <li>Node 1のフェイルオーバ後、デルタリカバリを指定。Node 1はデルタリカバリ待ちの状態。</li>
		  <li>そこでアクティブサーバのNode 2がダウン。<note>リバランスを実行することはできません。</note></li>
            <li>Node 2をフェイルオーバ。 </li>
            <li>ペンディング中のデルタリカバリをキャンセルし、フルリカバリを指定してリバランス。</li>
            <li>Node 2を修復し、クラスタに追加してリバランス。</li>
          </ol>
       
      <p>Node 1をデルタリカバリし、リバランス中にNode 1がクラッシュ。</p>
      
      <ol>
            <li>Node 1のフェイルオーバ後、デルタリカバリを指定し、リバランスを開始。</li>
			<li>Node 1がクラッシュし、リバランスが失敗。</li>
			<li>Node 1を修復、サーバノードを再起動し、リバランス。Node 1をフルリカバリにより再追加。
			</li>
          </ol>
        
        <p>Node 1のデルタリカバリ時にバケットに対して操作を実行。</p>
		<p>リバランスの失敗するバケットの操作は、バケットの追加、レプリカ設定の変更、バケットのフラッシュです。</p>
      <ol>
            <li>Node 1のフェイルオーバ後、デルタリカバリを指定、その後バケットに上記操作が行われた。</li>
            <li>リバランスを実行すると失敗。<p><image
                  href="../images/ui-delta-rebalance-not-available.png" width="360"/></p></li>
            <li>ペンディング中のデルタリカバリをキャンセルし、フルリカバリを指定、リバランス。</li>
          </ol>
          <note type="note">バケットの削除はデルタリカバリを継続できます。</note>
        
        
        <p>Node 1とNode 2をデルタリカバリ中にNode 2がクラッシュ。</p>
          <ol>
            <li>Node1とNode 2いずれもフェイルオーバ後、デルタリカバリを指定。</li>
            <li>Node 2がクラッシュ。</li>
            <li>リバランスを実行すると失敗。 <p><image href="../images/ui-rebalance-failed.png"
                  width="480"/></p></li>
          </ol>
      
     
    </section>
    
    
    
  </body>
  
  <related-links>
    <linklist>
      <link href="graceful-failover.dita"></link>
      <link href="../CLI/CBcli/cbcli-servers.dita"/>
      <link href="../REST/rest-server-nodes.dita"/>
    </linklist>
  </related-links>
</topic>
