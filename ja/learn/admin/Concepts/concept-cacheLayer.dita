<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic xml:lang="ja" id="topic2927">
  <title>キャッシュレイヤー</title>
  <shortdesc>Couchbase Serverは、非常に高速なデータの読み書きを提供する為に、
    サーバーの中心的な役割としてキャッシュ層を持っています。</shortdesc>
  <body>
    
    <p>Couchbase Serverは、自動的にキャッシュ層を管理し、パフォーマンスを確保するために必要なキャッシュスペースを
       確保します。
       キャッシュ層に置かれたアイテムは、ディスクに書くために自動的にディスクキューに入ります。
       キャッシュに乗ったアイテムへのアクセス頻度が低いと判断されると、そのアイテムはRAM上から削除され、他のアイテムのためにスペースを確保します。
       同様に、アクセス頻度の低いアイテムをディスクから取得した場合は、リクエストされたときにキャッシュ層に保存します。
       よりアクセス頻度の高いデータを高いパフォーマンスで提供するために、全体の情報の<i>working set</i>を管理します。
       working setは、頻繁にアクセスされるデータで、パフォーマンス向上のためRAM上に保存されます。</p>

    <p>アクセス頻度が高いものをRAM上に、低いものをディスク上に保存するため、CouchbaseはRAMからディスクにデータを非同期で移動させます。
       この処理は、自動的に、バックグラウンドで非同期に行われます。
       Couchbaseは継続的にクライアントからのアクセス情報を監視し、アクティブなデータをキャッシュ層に残すように考えています。
       サーバーはリクエストに応え続けながら、メモリ上からディスクへとデータを移動します。
       高頻度でのライト中は、サーバーがメモリからディスクへ十分なアイテムを書き出すまで、クライアントは一時的にアウトオブメモリの通知を受けます。
       非同期である性質と、この方法でキューを使うことで、非常に高速なリード/ライトのパフォーマンスを実現しています。
       そうすることで、従来のRDBMSが不安定なパフォーマンスであることの典型的な要因である、ロードやパフォーマンスのスパイクを排除しています。
    </p>

    <p>サーバーがディスクにデータを書き込んだとき・クライアントがデータをリクエストしたとき、個別のドキュメントIDが送られ、
       サーバーは情報が存在するかどうかを判断します。
       CouchbaseServerは、メタデータの構造をもとに、この動作をします。
       メタデータは、データベース内の各ドキュメントの情報であり、RAM上に保存されています。
       したがって、サーバーは、無効なドキュメントIDに対しては"document ID not found"を返し、RAM上にあればRAMからデータを返し、RAM上にない場合は、ディスクから取得したデータをクライアントに返します。</p>
    
    <note type="note">常にディスクにリード/ライトするDBソリューションは、非常に低速なパフォーマンスとなります。
      それ意外のDBソリューションアプローチとして、データベースと強調して動かす別コンポーネントとしてキャッシュ層をインストールし管理する方法が有ります。
      しかし、このアプローチの欠点は、カスタムされた重要なコード、キャッシュ層の管理やデータベースとキャッシュ層とのデータ転送を自身で管理する必要があることです。</note>

  </body>
</topic>
