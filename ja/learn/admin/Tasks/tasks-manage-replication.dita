<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic xml:lang="ja" id="topic6877">
	<title>レプリケーションの設定</title>
	<shortdesc>レプリカデータはCouchbaseクラスタ内で分散され、単一障害点を回避します。
	データのレプリケーションはバケットごとに、ノード単位で構成されます。</shortdesc>
	<body>
		<p>Couchbaseクラスタ内には、<term>アクティブデータ</term>と<term>レプリカデータ</term>
			が各ノード上にあります。アクティブデータはクライアントからそのノードに書き込まれたデータです。
			レプリカデータは他のノードにあるアイテムのコピーです。
		</p>
		<p>Couchbase Serverにアイテムを書き込むと、そのデータのコピーをそのノードのRAMから他のノードへとコピーします。
		レプリカデータの分散はアクティブデータの分散と同様に処理されます。レプリカデータの一部分がクラスタ内で分散され、単一障害点を回避します。</p>

	<p>ノード間のデータレプリケーションは完全にピアツーピアで、直接クラスタ内のノード間で情報がレプリケートされます。
		クラスタ内のノード間にトポロジ、階層、マスタ - スレーブの関係はありません。
	クライアントがクラスタ内のノードに書き込みを行うと、Couchbase Serverはそのノード上にデータを保存し、データをクラスタ内の一つ以上の他のノードに分配します。</p>
		<p>以下の図はCouchbaseクラスタ内の2つのノードがどのようにお互いのレプリカデータを保存しているのかを示しています:</p>

		<image href="../images/replica_backoff.png" width="720" />


		<p>クライアントアプリケーションがデータをノードに書き込むと、そのデータはレプリケーションキューに追加され、コピーが他のノードに送信されます。
		レプリケートされたデータは二つ目のノードのRAM上に保存され、二つ目のノード上のディスクに書き込むために、ディスク書き込みキューに配置されます。</p>
	<p>二つ目のノードはまた、レプリカデータとクライアントからの書き込みを同時に処理しています。
		レプリカデータと送信された書き込みデータを同一のディスクキューに追加します。
		ディスク書き込みキュー内のアイテム数が多くなり過ぎると、二つ目のノードは
		<term>backoff message</term>
		を一つ目のノードに返すことがあります。
		すると一つ目のノードは、二つ目のノードにレプリケーションするアイテムの送信頻度を低くします。
		これは二つ目のノードがすでに大量の書き込み要求をクライアントアプリケーションから受け付けている場合に必要となります。
	 </p>
	 <p>レプリケーション対象の同一のドキュメントに複数の変更が発生した場合、Couchbase Serverはアイテムを
		 <term>deduplicate</term>します。
		 これは効率化のため、ドキュメントの最新のバージョンのみを二つ目のノードに送るということです。
	</p>
	<p>もしシステム内の一つ目のノードがダウンしても、レプリケートされたデータは二つ目のノードで利用できます。
		二つ目のノードのRAM内にデータのコピーが存在するため、Couchbaseは二つ目のノードにあるレプリカデータを即座に提供することができます。
		ダウンしたノードからデータをコピーしたり、ディスクからデータを読み込む必要はありません。
		レプリカデータが二つ目のノードで有効になると、Couchbase Serverはデータとサーバのマッピング情報を更新し、
		クライアントアプリケーションにこの情報を共有します。
		そしてクライアントアプリケーションは動作しているノードからレプリカデータを取得できるようになります。
	</p>
		
		<section><title>データレプリケーションの適用</title>
			<p>必要なデータのコピー数に応じて、各バケットで異なるデータレプリケーションを設定することができます。
				データを冗長化させ可用性を高めるために、各データバケットでは最大3つのレプリカをクラスタ内に作成することができます。
			</p>
			<p>レプリケーションはクラスタ内のノード数が設定したレプリカ数を満たす場合に有効となります。
				例えば、バケットのレプリカ数を3に設定した場合、クラスタ内に4つ以上のノードが存在する場合のみレプリケーションが有効となります。
				</p>
		
				<p>バケットに対してレプリカ数を設定し、バケットを作成した後、レプリカ数を変更することはできません。
			このため、必要なレプリカ数を確実に指定するように注意してください。</p></section>
	
	</body>
	<related-links>
		<linklist>
			<link href="tasks-nodeFailover.dita" />
			<link href="tasks-rebalance.dita" />
			<link href="../UI/ui-data-buckets.dita" />
			<link href="../CLI/cbepctl-intro.dita" />
			<link href="../CLI/CBepctl/cbepctl-diskwritequeue.dita" />
			<link href="../UI/ui-monitoring-statistics.dita" />
		</linklist>

	</related-links>



</topic>
