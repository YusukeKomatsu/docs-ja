<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference xml:lang="ja" id="rest-bucket-create">
	<title>bucketの作成と編集</title>
	<shortdesc>bucketの作成と編集をする時は、<codeph>POST</codeph> オペレーションと <codeph>/pools/default/bucket</codeph> URIを使用します。</shortdesc>
	<refbody>
		<section>
			<title>説明</title>
			<p>
				bucketはクラスタ内のbucketのREST URIエンドポイントを<codeph>POST</codeph>で送信することで作成と編集を行います。
				これはCouchbaseもしくはMecachedタイプのbucketのいずれかを作成するときに使用することが出来ます。
				bucket名は先頭にアンダースコアを使用することが出来ません。
			</p>
			
			<p>このエンドポイントはクラスタに存在するbucketのリストを取得するために使用することもできます。</p>
			<note type="important">
				bucketのプロパティを編集するときは必ず全てのbucketのプロパティを指定してください。
				もしbucketのプロパティが指定されない場合(もしくは既存の値を変更しなかった場合)、Couchbase Serverはプロパティをデフォルト状態にリセットする可能性があります。
				特定のプロパティを変更する予定がない場合でも、この動作を回避するために既存の値を再設定してください。
			</note>
			<p>
				ノード上にdata bucketのための予備ファイルが作成された時、REST APIは成功のレスポンスを返します。
				しかしながらマルチノードクラスタが実装されている場合、レスポンスが送られた時にbucketの作成が全てのノード上で完了していない事があります。
				したがってRESTの呼び出しに成功した直後の操作にはbucketが使えない可能性があります。
			</p>
			<p>
				bucketが使用可能であることを確認するには、bucketからキーを参照してみてください。
				もし ‘key not found’ というエラーを受け取るかキーのドキュメントが返された場合はbucketは存在しクラスタの全てのノードで利用可能です。
				キーのリクエストはクラスタの任意のノードのCouchbase SDKを介して発行することが出来ます。
				詳細な情報については <i>Couchbase Developer Guide</i> を参照してください。
			</p>
		</section>
		
		<section><title>HTTPメソッドとURI</title>
			<codeblock>POST /pools/default/buckets</codeblock>
		
		<ul>
			<li>リクエストデータ - List of payload parameters for the new bucket</li>
			<li>レスポンスデータ - JSON of the bucket confirmation or an error condition</li>
			<li>認証の要・不要 - Yes </li>
		</ul>
		
		
		<p>bucketを作成するためのパラメータ:</p>

		<table>
			<title>bucketを作成するためのパラメータ</title>
			<tgroup cols="2">
				<colspec colname="col1" colwidth="1*"/>
				<colspec colname="col2" colwidth="1.63*"/>
				<thead>
					<row>
						<entry>ペイロード引数</entry>
						<entry>説明</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry><codeph>authType</codeph></entry>
						<entry>
							必須パラメータ。
							新しいbucketの有効にするための認証の種別を文字列で指定します。
							もし指定されていない場合は空パスワードがデフォルトになります。
							“sasl”であれば認証が有効になります。
							“none”であれば認証が無効になります。
						</entry>
					</row>
					<row>
						<entry><codeph>bucketType</codeph></entry>
						<entry>
							必須パラメータ。作成するbucketの種類。文字列。
							“memcached” は Memcached bucket を構成します。
							“couchbase” は Couchbase bucket を構成します。
						</entry>
					</row>
					<row>
						<entry><codeph>flushEnabled</codeph></entry>
						<entry>任意パラメータ。
							指定されたbucketの ‘flush all’ 機能を有効にします。
							論理型。
							1 は flush all をサポートし、 0 では flush all がサポートされません。
							デフォルトは0。
						</entry>
					</row>
					<row>
						<entry><codeph>name</codeph></entry>
						<entry>必須パラメータ。新しいbucketの名前。</entry>
					</row>
					<row>
						<entry><codeph>parallelDBAndViewCompaction</codeph></entry>
						<entry>
							任意パラメータ。文字列。
							ディスク上のデータベースとビューファイルを同時に圧縮するかどうかを指定します。
							デフォルトは “false.”
						</entry>
					</row>
					<row>
						<entry><codeph>proxyPort</codeph></entry>
						<entry>
							必須パラメータ。数字データ型。
							bucketと通信するためのプロキシポート。
							まだ使用されていない有効なネットワークポートでなければいません。
							もし認証種別がSASLでない場合、有効なポート番号を指定する必要があります。
						</entry>
					</row>
					<row>
						<entry><codeph>ramQuotaMB</codeph></entry>
						<entry>
							必須パラメータ。新しいbucketのRAM割当量をMB(メガバイト)で指定。 数字データ型。
							最小値は100を設定することができ、最大値はノードを確立するためのメモリ割当量と同じ大きさのみ指定できます。
							他のbucketがノードと関連付けられている場合、RAMの割り当ては、ノードの他のbucketのメモリ割り当てた残りメモリ量と同じ大きさに出来ます。
						</entry>
					</row>
					<row>
						<entry><codeph>replicaIndex</codeph></entry>
						<entry>
							任意パラメータ。論理型。
							1 はレプリカbucketのレプリカインデックスが有効な場合、0 は無効な場合。デフォルトは 1 です。
						</entry>
					</row>
					<row>
						<entry><codeph>replicaNumber</codeph></entry>
						<entry>
							任意パラメータ。数字データ型。
							このbucketを構成するレプリカの数。
							Couchbase bucketを作成するときは必須パラメータです。
							デフォルトは 1、最小値は 0、最大値は 3 です。
						</entry>
					</row>
					<row>
						<entry><codeph>saslPassword</codeph></entry>
						<entry>
							任意パラメータ。文字列型。
							SASL認証のパスワード。
							SASL認証が有効の場合は必須です。
						</entry>
					</row>
					<row>
						<entry><codeph>threadsNumber</codeph></entry>
						<entry>
							任意パラメータ。2〜8の整数型。
							data bucketの同時読み込み・書き込みの数を変更します。
						</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
		
		<p>bucketを作成するとき、<codeph>authType</codeph>パラメータを指定しなくてはいけません:</p>
		<ul>
			<li><p>もし<codeph>authType</codeph>に<codeph>none</codeph>をセットした場合、proxyPortの数を指定しなければいけません。</p></li>
			<li><p>もし<codeph>authType</codeph>に<codeph>sasl</codeph>をセットした場合、<codeph>saslPassword</codeph>パラメータを必要に応じて指定することが出来ます。</p></li>
		</ul>
		<p>
			<codeph>ramQuotaMB</codeph>パラメータはメモリの必要量をメガバイトで指定します。
			これはbucketの各nodeで許可し、サポートされている最小値は100MBです。
		</p>
		<ul>
			<li>
				<p>
					もしmemcashed bucketに格納されたアイテムが<codeph>ramQuotaMB</codeph>を超えた場合、Couchbase Serverは通常、最後にリクエストされたアイテムを基準にしてアイテムを（RAMから）強制削除します。
					Couchbase Serverはオブジェクトのサイズやアイテムが参照されているか否かに応じて、他の使用頻度の低いアイテムを強制削除することがあります。
				</p>
			</li>
			<li>
				<p>
					Couchbase bucketの場合、<codeph>ramQuotaMB</codeph>が上限に達した時、システムが一時的に失敗を帰す場合があります。
					システムは新しいアイテムのために、メモリを占有している古いアイテムを削除することで、有効なramQuotaMBが空いている状態を25％を保ち続けようとします。これらのアイテムが後でリクエストされた場合は、ディスクから取得します。
				</p>
			</li>
		</ul>
		</section>
		
		<section><title>シンタックス</title>
			<p>Curlリクエストシンタックス:</p>
			<codeblock>curl -X POST -u [admin]:[password] 
	-d name=[new-bucket-name] -d ramQuotaMB=[value] -d authType=[none | sasl] \
	-d replicaNumber=[value] -d proxyPort=[proxy-port] 
	http://[localhost]:8091/pools/default/buckets
			</codeblock>

		</section>
		
		<section>
			<title>例</title>
			<p>Curlリクエスト例:</p>
			<codeblock>curl -X POST -u admin:password 
	-d name=newbucket -d ramQuotaMB=200 -d authType=none \
	-d replicaNumber=2 -d proxyPort=11215 
	http://10.5.2.54:8091/pools/default/buckets
</codeblock>
			<p>Raw HTTPリクエスト例:</p>
			<p>
				bucketを構成するためのパラメータはペイロードデータを通して渡します。
				各パラメータと値は、キーと値のペアとして渡し、各ペアはアンパサンドで区切ります。
				HTTP <codeph>POST</codeph> リクエストのペイロードに設定パラメータを含みます。
			</p>
			<codeblock>POST /pools/default/buckets
HTTP/1.1
Host: 10.5.2.54:8091
Content-Type: application/x-www-form-urlencoded; charset=UTF-8
Authorization: Basic YWRtaW46YWRtaW4=
Content-Length: xx
name=newbucket&amp;ramQuotaMB=20&amp;authType=none&amp;replicaNumber=2&amp;proxyPort=11215
</codeblock>
		</section>
			
			<section>
				<title>レスポンス</title>
				<p>bucketの作成が成功した場合、HTTP response 202 (Accepted) がからのコンテンツと一緒に返ってきます。</p>
				<codeblock>202 Accepted</codeblock>
			</section>
		
		<section>
			<title>レスポンスコード</title>
			
			<p>
				もしbucketが作成出来なかったら、パラメータが不足しているか間違っているためです。
				HTTPレスポンス400がエラー理由を含むJSONペイロードと一緒に返ってきます。
			</p>
			<table>
				<title>bucket作成時のエラーコード</title>
				<tgroup cols="2">
					<colspec colname="col1" colwidth="1*"/>
					<colspec colname="col2" colwidth="3.05*"/>
					<thead>
						<row>
							<entry>エラーコード</entry>
							<entry>説明</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>202</entry>
							<entry>承諾</entry>
						</row>
						<row>
							<entry>204</entry>
							<entry>
								不正なリクエストのJSONには {“errors”: {…. }} の形式でエラーの内容を含みます。
								名前：指定された名前のバケットがすでに存在しています
								ramQuotaMB：RAMの割り当てが大きすぎるか小さすぎます
								replicaNumber：指定されている必要があり、正の整数でなければなりません
								proxyPort：ポートが無効か、既に使用されています
							</entry>
						</row>
						<row>
							<entry>404</entry>
							<entry>オブジェクトが見つからなかった</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
			
		</section>
	</refbody>
	<related-links>
		<linklist>
			<link href="../Concepts/concept-readerWriter.dita"/>
		</linklist>
	</related-links>

</reference>
