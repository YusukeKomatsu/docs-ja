<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic xml:lang="ja" id="topic2955">
  <title>vBuckets</title>
  <shortdesc>
	  vBucketはCouchbaseクラスタにおけるキー空間のサブセットの<i>所有者</i>を定義します。
	  vBucketはクラスタ内で効率的に情報を分散するために利用されます。
  </shortdesc>
  <body>
	  <p>
		  vBucketシステムは、1つ以上のノードによるデータの分散と、レプリカ(バケットデータのコピー)を実現するために利用されます。
		  vBucketはユーザがアクセス可能なコンポーネントではありませんが、Couchbase Serverの重要なコンポーネントであり、
		  可用性と伸縮性のために非常に重要です。
      </p>
	  <p>
		  クライアントはvBucketを担当するノードに直接接続して、バケットに保存された情報にアクセスします。
		  プロキシや再配布のアーキテクチャを利用せず、データを保持するノードに直接接続します。
		  結果として、物理的なトポロジを、論理的なデータパーティションから分離します。
		  このアーキテクチャが、Couchbase Serverに伸縮性と柔軟性をもたらしています。
      </p>
	  <p>
		  すべてのドキュメントIDはvBucketに属しています。マッピング関数によって、ドキュメントがどのvBucketに属するのかを計算できます。
		  Couchbase Serverではこのマッピング関数はハッシュ関数であり、ドキュメントIDを入力としてvBucketのIDを出力します。
		  vBucketのIDを計算したあと、そのvBucketを"ホスト"するサーバを、テーブルから参照します。
		  このテーブルはvBucketごとに行があり、vBucketとそのホストサーバを関連付けています。
		  このテーブル内で定義されている各サーバは通常、複数のvBucketを担当します。
      </p>
    
	  <p>以下の図はキーがサーバにマッピングされている様子(vBucketマップ)を示しています。</p>
    
	  <p>
		  このシナリオでは、クラスタ内に3台のサーバがあり、クライアントがKEYのバリューを<codeph>GET</codeph>操作により参照しようとしています。
      </p>
    
    <ol>
		<li>
			クライアントはまず、キーをハッシュ化して、KEYが所属するvBucketを計算します。
			この例では、ハッシュの結果、vBucket 8(vB8)となります。
        </li>
		<li>
			vBucketマップを参照し、クライアントはサーバCがvB8をホストしていることを知ります。
        </li>
		<li>
			クライアントは<codeph>GET</codeph>操作を直接サーバCに送信します。
		</li>
    </ol>
    
      <image href="../images/vbuckets.png" width="500"></image>
    
	  <p>
		次のシナリオでは、3台のクラスタに新しくサーバを追加しています。
		新規のサーバDがクラスタに参加すると、リバランス操作によって、vBucketマップが更新されます。
		更新されたマップは、クラスタ内のその他のノード、すべての接続中の"スマート"クライアント、Moxiプロキシサーバといった、
		クラスタに接続するすべてのオブジェクトに送信されます。
		</p>
    
		<p>4台のクラスタとなったあと、クライアントが再度KEYのバリューを<codeph>GET</codeph>操作により取得すると:</p>
    <ul>
		<li>ハッシュアルゴリズムは依然としてvBucket 8(vB8)を出力します。</li>
		<li>更新されたvBucketマップはvBucket 8をサーバDにマッピングしています。</li>
		<li>クライアントは<codeph>GET</codeph>操作を直接サーバDに送信します。</li>
    </ul>
    
    <image href="../images/vbuckets-after.png" width="500"></image>
    
	<note type="note">
		このアーキテクチャによりCouchbase Serverは、典型的なRDBMSのシャーディング方式を利用せず変化に対応できます。
		また、<codeph>memcached</codeph>が採用している、クライアント側でキーをハッシュし、定義されたリストからサーバを特定する方式とも異なります。
		memcachedの方式は、トポロジの変化に対応するために、サーバリストの継続的管理が必要であり、Ketamaなどの特定のハッシュアルゴリズムが必要になります。
	</note>
    
  
    
  </body>
  
  <related-links>
    <linklist>
      <link href="concept-rebalancing.dita"></link>
    </linklist>
  </related-links>
</topic>
